    [
        {
            "id": "1",
            "name": ".env",
            "path": ".env",
            "description": "environment configuration file.",
            "details": {
                "purpose": "Provides example environment variables for development.",
                "content": 
                "OPENAI_API_KEY=\"Enter Key Here\"\nSUPABASE_URL=\"Enter Key Here\"\nSUPABASE_ANON_KEY=\"Enter Key Here\"\nPORT=3001",
                "notes": "Replace the placeholder values with actual keys and URLs for your development environment to ensure proper functionality. The OPENAI_API_KEY is required for accessing OpenAI's API, SUPABASE_URL and SUPABASE_ANON_KEY are needed for connecting to your Supabase database, and PORT specifies the port on which your application will run."
            }
        },
        {
            "id": "2",
            "name": ".gitignore",
            "path": ".gitignore",
            "description": "Specifies files and directories to be ignored by Git.",
            "details": {
                "purpose": "Defines untracked files that Git should ignore.",
                "content": 
                "node_modules/\n.env",
                "notes": "This .gitignore file ensures that the 'node_modules' directory, which contains all your npm dependencies, and the '.env' file, which holds your environment variables, are not tracked by Git. This helps keep your repository clean and secure by excluding large dependency directories and sensitive information."
            }
        },
        {
            "id": "3",
            "name": "LICENSE.md",
            "path": "LICENSE.md",
            "description": "Contains the project's license information.",
            "details": {
                "purpose": "Provides the terms and conditions for using, copying, and distributing the software.",
                "content": "MIT License\n\nCopyright (c) 2023 Mi'gmaq Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
                "notes": "This is a standard MIT License. Ensure you understand the implications of using this license in your project."
            }
        },
        {
            "id": "4",
            "name": "README.md",
            "path": "README.md",
            "description": "Contains the project's readme information.",
            "details": {
                "purpose": "Provides an overview of the project, setup instructions, and usage guidelines.",
                "content": "# Mi'gmaq Foundation\n\n- Welcome to the Mi'gmaq Foundation repository. This project aims to provide educational resources and tools for learning and preserving the Mi'gmaq language.\n\n## Table of Contents\n\n- [Project Structure](#project-structure)\n- [API Endpoints](#api-endpoints)\n- [Client-side Code](#client-side-code)\n- [Server-side Code](#server-side-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Project Structure\n\n```\nMi'gmaq Foundation\n├── .env.sample\n├── .gitignore\n├── LICENSE.md\n├── README.md\n├── package-lock.json\n├── package.json\n├── tailwind.config.js\n├── vercel.json\n├── client\n│   ├── css\n│   │   ├── input.css\n│   │   ├── output.css\n│   ├── js\n│   │   ├── index.js\n│   │   ├── wordOfTheDay.js\n│   │   ├── dictionary.js\n│   │   ├── word-details.js\n│   │   ├── utils\n│   │   │   ├── theme-toggle.js\n│   │   ├── games\n│   │   │   ├── flashcard.js\n│   │   ├── lessons\n│   │   │   ├── lesson1.js\n│   │   ├── resources\n│   │       ├── resource1.js\n│   ├── pages\n│   │   ├── index.html\n│   │   ├── education.html\n│   │   ├── dictionary.html\n│   │   ├── word-details.html\n│   │   ├── games\n│   │   │   ├── flashcard.html\n│   │   ├── lessons\n│   │   │   ├── lesson1.html\n│   │   ├── resources\n│   │       ├── resource1.html\n│   ├── assets\n│   │   ├── dictionary.json\n├── server\n│   ├── config\n│   │   ├── database.js\n│   │   ├── openai.js\n│   ├── controllers\n│   │   ├── dictionaryController.js\n│   │   ├── wordOfTheDayController.js\n│   │   ├── aiController.js\n│   │   ├── commentsController.js\n│   │   ├── games\n│   │   │   ├── gamesController.js\n│   │   ├── lessons\n│   │   │   ├── lessonsController.js\n│   │   ├── resources\n│   │       ├── resourcesController.js\n│   ├── routes\n│   │   ├── dictionaryRoutes.js\n│   │   ├── wordOfTheDayRoutes.js\n│   │   ├── aiRoutes.js\n│   │   ├── commentsRoutes.js\n│   │   ├── games\n│   │   │   ├── gamesRoutes.js\n│   │   ├── lessons\n│   │   │   ├── lessonsRoutes.js\n│   │   ├── resources\n│   │       ├── resourcesRoutes.js\n│   ├── services\n│   │   ├── dictionaryService.js\n│   │   ├── wordOfTheDayService.js\n│   │   ├── aiService.js\n│   │   ├── commentsService.js\n│   │   ├── games\n│   │   │   ├── gamesService.js\n│   │   ├── lessons\n│   │   │   ├── lessonsService.js\n│   │   ├── resources\n│   │       ├── resourcesService.js\n│   ├── app.js\n│   ├── server.js\n├── .env\n\n```\n## API Endpoints\n\n### Dictionary Routes\n\n- `GET /api/dictionary` - Retrieve the entire dictionary.\n- `GET /api/word-details?word={word}` - Retrieve details for a specific word.\n\n### Word of the Day Routes\n\n- `GET /api/word-of-the-day` - Retrieve the word of the day.\n- `PUT /api/word-of-the-day/update` - Update the word of the day.\n\n### AI Routes\n\n- `GET /api/fact?word={word}` - Retrieve an AI-generated fact about a word.\n\n### Comments Routes\n\n- `GET /api/comments?word_id={word_id}` - Retrieve comments for a specific word.\n- `POST /api/comments` - Add a new comment.\n\n## Client-side Code\n\n### `client/js/index.js`\n\nPlaceholder for index-specific JavaScript if needed.\n\n### `client/js/wordOfTheDay.js`\n\n- Fetches and displays the word of the day.\n\n### `client/js/dictionary.js`\n\n- Handles dictionary search and filtering.\n- Fetches and displays dictionary data.\n- Implements pagination for dictionary entries.\n\n### `client/js/word-details.js`\n\n- Fetches and displays details for a specific word.\n- Fetches and displays comments for a word.\n- Handles adding new comments and replies.\n\n## Server-side Code\n\n### `server/app.js`\n\n- Sets up the Express application, middleware, and routes.\n\n### `server/server.js`\n\n- Starts the server on the specified port.\n\n### `server/config/database.js`\n\n- Configures and exports the Supabase client for database interactions.\n\n### `server/config/openai.js`\n\n- Configures and exports the OpenAI client for AI interactions.\n\n## Controllers\n\n- `dictionaryController.js` - Handles dictionary-related API requests.\n- `wordOfTheDayController.js` - Handles word of the day API requests.\n- `aiController.js` - Handles AI-related API requests.\n- `commentsController.js` - Handles comment-related API requests.\n- `games/gamesController.js` - Handles game-related API requests.\n- `lessons/lessonsController.js` - Handles lesson-related API requests.\n- `resources/resourcesController.js` - Handles resource-related API requests.\n\n## Services\n\n- `dictionaryService.js` - Provides dictionary data operations.\n- `wordOfTheDayService.js` - Provides word of the day data operations.\n- `aiService.js` - Provides AI-related operations.\n- `commentsService.js` - Provides comment-related operations.\n- `games/gamesService.js` - Provides game-related operations.\n- `lessons/lessonsService.js` - Provides lesson-related operations.\n- `resources/resourcesService.js` - Provides resource-related operations.\n\n## Contributing\n\nIf you would like to contribute, please fork the repository and submit a pull request. For major changes, please open an issue to discuss what you would like to change.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE.md](LICENSE.md) file for details.",
                "notes": "Keep the README.md updated to reflect any changes in the project structure, setup, and usage instructions. This helps maintain clarity and ensures that contributors and users have the most current information."
            }
        },
        {
            "id": "5",
            "name": "package.json",
            "path": "package.json",
            "description": "Contains the project's dependencies and scripts.",
            "details": {
                "purpose": "Defines project metadata and dependencies for Node.js.",
                "content": {
                    "name": "migmag_foundation",
                    "version": "1.0.0",
                    "main": "index.js",
                    "scripts": {
                        "build:tailwind": "tailwindcss -i client/css/input.css -o client/css/output.css --watch",
                        "start": "node server/server.js"
                    },
                    "keywords": [],
                    "author": "",
                    "license": "ISC",
                    "description": "",
                    "dependencies": {
                        "@supabase/supabase-js": "^2.44.3",
                        "@vercel/speed-insights": "^1.0.12",
                        "axios": "^1.7.2",
                        "cors": "^2.8.5",
                        "cron": "^3.1.7",
                        "dotenv": "^16.4.5",
                        "express": "^4.19.2",
                        "fuse.js": "^7.0.0",
                        "node": "^22.3.0",
                        "node-cron": "^3.0.3",
                        "nodemon": "^3.1.3",
                        "openai": "^4.52.3",
                        "vercel": "^34.3.1"
                    },
                    "devDependencies": {
                        "tailwindcss": "^3.4.4"
                    }
                },
                "notes": "Ensure to keep the dependencies and scripts updated as per project requirements."
            }
        },
        {
            "id": "6",
            "name": "package-lock.json",
            "path": "package-lock.json",
            "description": "Contains the exact versions of dependencies.",
            "details": {
                "purpose": "Ensures consistent dependency versions across installations.",
                "content": "null",
                "notes": "Do not manually edit this file. It is automatically generated."
            }
        },
        {
            "id": "7",
            "name": "tailwind.config.js",
            "path": "tailwind.config.js",
            "description": "Tailwind CSS configuration file.",
            "details": {
                "purpose": "Configures the Tailwind CSS framework for the project.",
                "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./client/**/*.html', './client/**/*.js'], // Update this to match all relevant files\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Noto Sans', 'sans-serif'], // This sets Noto Sans as the default sans-serif font\n      },\n    },\n  },\n  plugins: [],\n}",
                "notes": "Ensure the 'content' paths are correctly set to include all HTML and JS files within the client directory. This configuration helps Tailwind CSS to properly purge unused styles, leading to optimized CSS output. Customize the 'theme.extend' section as needed to fit the project's design requirements."
            }
        },
        
        {
            "id": "8",
            "name": "vercel.json",
            "path": "vercel.json",
            "description": "Vercel deployment configuration file.",
            "details": {
                "purpose": "Configures the deployment settings for Vercel.",
                "content": {
                    "version": 2,
                    "builds": [
                        {
                            "src": "server/server.js",
                            "use": "@vercel/node"
                        },
                        {
                            "src": "client/**/*",
                            "use": "@vercel/static"
                        }
                    ],
                    "routes": [
                        {
                            "src": "/api/(.*)",
                            "dest": "/server/server.js"
                        },
                        {
                            "src": "/dictionary",
                            "dest": "/client/pages/dictionary.html"
                        },
                        {
                            "src": "/education",
                            "dest": "/client/pages/education.html"
                        },
                        {
                            "src": "/word-details",
                            "dest": "/client/pages/word-details.html"
                        },
                        {
                            "src": "/",
                            "dest": "/client/pages/index.html"
                        },
                        {
                            "src": "/css/(.*)",
                            "dest": "/client/css/$1"
                        },
                        {
                            "src": "/js/(.*)",
                            "dest": "/client/js/$1"
                        },
                        {
                            "src": "/assets/(.*)",
                            "dest": "/client/assets/$1"
                        },
                        {
                            "src": "/(.*)",
                            "dest": "/client/pages/$1"
                        }
                    ]
                },
                "notes": "Ensure the paths and routes match the project's structure."
            }
        },
        {
            "id": "9",
            "name": "input.css",
            "path": "client/css/input.css",
            "description": "Tailwind CSS input file.",
            "details": {
                "purpose": "Contains the base, components, and utilities from Tailwind CSS along with custom styles.",
                "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;",
                "notes": "Tailwind CSS input file with area to add styles custom styles."
            }
        },
        {
            "id": "10",
            "name": "output.css",
            "path": "client/css/output.css",
            "description": "Tailwind CSS output file.",
            "details": {
                "purpose": "Generated CSS file from Tailwind CSS with custom styles.",
                "content": "null",
                "notes": "This file is generated by Tailwind CSS based on the input.css file."
            }
        },
        {
            "id": "11",
            "name": "dictionary.js",
            "path": "client/js/dictionary.js",
            "description": "JavaScript file for the dictionary functionality.",
            "details": {
                "purpose": "Handles searching, filtering, and displaying dictionary words.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    // Get references to DOM elements\n    const searchInput = document.getElementById('searchInput');\n    const searchButton = document.getElementById('searchButton');\n    const filterSelect = document.getElementById('filterSelect');\n    const dictionaryContainer = document.getElementById('dictionary-container');\n    const alphabetContainer = document.getElementById('alphabet-container');\n    const paginationContainer = document.getElementById('pagination-container');\n    const instructionsModal = document.getElementById('instructionsModal');\n    const themeToggle = document.getElementById('theme-toggle');\n    const instructionsIconLight = document.getElementById('instructionsIconLight');\n    const instructionsIconDark = document.getElementById('instructionsIconDark');\n    const closeButton = document.querySelector('.modal-close-button');\n\n    // Define alphabet for navigation\n    const alphabet = 'AEGIJLMNOPQSTUW';\n    let currentPage = 1; // Current page for pagination\n    const itemsPerPage = 20; // Items per page for pagination\n    let currentFilter = ''; // Current filter for search\n    let currentTerm = ''; // Current search term\n    let dictionaryData = []; // Full dictionary data\n    let filteredData = []; // Filtered dictionary data\n    let fuse; // Fuse.js instance for searching\n\n    // Initialize the application\n    initialize();\n\n    function initialize() {\n        populateAlphabetContainer(); // Populate alphabet navigation\n        addEventListeners(); // Add event listeners\n        fetchFullDictionaryData(); // Fetch dictionary data\n        applyTheme(); // Apply the current theme\n    }\n\n    // Populate alphabet navigation container\n    function populateAlphabetContainer() {\n        alphabet.split('').forEach(letter => {\n            const letterSpan = document.createElement('span');\n            letterSpan.textContent = letter;\n            letterSpan.className = 'border border-gray-300 w-14 h-14 flex items-center justify-center text-4xl cursor-pointer rounded-md m-2 hover:bg-gray-400 dark:hover:bg-gray-300';\n            letterSpan.addEventListener('click', () => filterByLetter(letter));\n            alphabetContainer.appendChild(letterSpan);\n        });\n    }\n\n    // Add event listeners for search, theme toggle, and instructions modal\n    function addEventListeners() {\n        searchButton.addEventListener('click', () => searchDictionary());\n        searchInput.addEventListener('keydown', function(event) {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                searchDictionary();\n            }\n        });\n\n        themeToggle.addEventListener('click', () => {\n            document.body.classList.toggle('dark-mode');\n            applyTheme();\n        });\n\n        instructionsIconLight.addEventListener('click', () => toggleInstructionsModal(true));\n        instructionsIconDark.addEventListener('click', () => toggleInstructionsModal(true));\n        closeButton.addEventListener('click', () => toggleInstructionsModal(false));\n\n        window.addEventListener('click', (event) => {\n            if (event.target === instructionsModal) {\n                toggleInstructionsModal(false);\n            }\n        });\n    }\n\n    // Fetch the full dictionary data from the server\n    function fetchFullDictionaryData() {\n        fetch('/api/dictionary')\n            .then(response => response.json())\n            .then(data => {\n                dictionaryData = data || [];\n                initializeFuse(dictionaryData);\n                filteredData = dictionaryData;\n                displayDictionary(filteredData);\n                createPagination(filteredData.length);\n            })\n            .catch(error => {\n                console.error('Error fetching dictionary data:', error);\n                displayError('Error fetching dictionary data. Please try again later.');\n            });\n    }\n\n    // Initialize Fuse.js for searching\n    function initializeFuse(words) {\n        const fuseOptions = {\n            keys: [\n                'word',\n                { name: 'usages.translation', weight: 0.5 },\n                { name: 'usages.english', weight: 0.5 },\n                'type',\n                'definitions'\n            ],\n            threshold: 0.4,\n        };\n        fuse = new Fuse(words, fuseOptions);\n    }\n\n    // Search the dictionary based on the current term and filter\n    function searchDictionary() {\n        currentTerm = searchInput.value.trim();\n        currentFilter = filterSelect.value;\n        if (currentTerm) {\n            let result = [];\n            switch (currentFilter) {\n                case 'word':\n                    result = fuse.search(currentTerm).filter(item =>\n                        item.item.word.toLowerCase().includes(currentTerm.toLowerCase()) ||\n                        (item.item.usages && item.item.usages.some(usage => usage.translation.toLowerCase().includes(currentTerm.toLowerCase())))\n                    );\n                    break;\n                case 'translations_mi':\n                    result = fuse.search(currentTerm).filter(item =>\n                        (item.item.usages && item.item.usages.some(usage => usage.translation.toLowerCase().includes(currentTerm.toLowerCase()))) ||\n                        item.item.word.toLowerCase().includes(currentTerm.toLowerCase())\n                    );\n                    break;\n                case 'translations_en':\n                    result = fuse.search(currentTerm).filter(item =>\n                        (item.item.usages && item.item.usages.some(usage => usage.english.toLowerCase().includes(currentTerm.toLowerCase()))) ||\n                        (item.item.definitions && item.item.definitions.some(def => def.toLowerCase().includes(currentTerm.toLowerCase())))\n                    );\n                    break;\n                case 'definitions':\n                    result = fuse.search(currentTerm).filter(item =>\n                        (item.item.definitions && item.item.definitions.some(def => def.toLowerCase().includes(currentTerm.toLowerCase()))) ||\n                        (item.item.usages && item.item.usages.some(usage => usage.english.toLowerCase().includes(currentTerm.toLowerCase())))\n                    );\n                    break;\n                case 'type':\n                    result = fuse.search(currentTerm).filter(item => item.item.type.toLowerCase().includes(currentTerm.toLowerCase()));\n                    break;\n                default:\n                    result = fuse.search(currentTerm);\n                    break;\n            }\n            filteredData = result.map(r => r.item);\n        } else {\n            filteredData = dictionaryData;\n        }\n\n        if (filteredData.length === 0) {\n            displayError('No results found. Please check your filter and try again.');\n        } else {\n            currentPage = 1;\n            displayDictionary(filteredData);\n            createPagination(filteredData.length);\n        }\n    }\n\n    // Filter dictionary by letter\n    function filterByLetter(letter) {\n        currentTerm = letter;\n        currentFilter = 'startsWith';\n        filteredData = dictionaryData.filter(word => word.word.toLowerCase().startsWith(letter.toLowerCase()));\n        if (filteredData.length === 0) {\n            displayError('No results found. Please check your filter and try again.');\n        } else {\n            currentPage = 1;\n            displayDictionary(filteredData);\n            createPagination(filteredData.length);\n        }\n    }\n\n    // Display the dictionary words on the page\n    function displayDictionary(words) {\n        dictionaryContainer.innerHTML = '';\n        if (words.length === 0) {\n            displayError('No results found. Please check your filter and try again.');\n            return;\n        }\n\n        const paginatedWords = words.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n\n        paginatedWords.forEach(word => {\n            const wordDiv = document.createElement('div');\n            wordDiv.classList.add('word-item', 'min-h-[10rem]', 'border', 'border-gray-300', 'rounded-lg', 'p-10', 'mb-4', 'transition', 'duration-300');\n\n            wordDiv.innerHTML = `\n                <a href=\"/word-details.html?word=${encodeURIComponent(word.word)}\" class=\"block p-6\">\n                    <h2 class=\"text-xl font-semibold mb-4\">${word.word}</h2>\n                    <div class=\"mb-4\">\n                        <strong class=\"block mb-2\">Part of Speech:</strong>\n                        <span class=\"block\">${word.type}</span>\n                    </div>\n                    <div class=\"mb-4\">\n                        <strong class=\"block mb-2\">English Definitions:</strong>\n                        <ul class=\"list-disc list-inside\">\n                            ${word.definitions.map(def => `<li>${def}</li>`).join('')}\n                        </ul>\n                    </div>\n                    <div>\n                        <strong class=\"block mb-2\">Translations:</strong>\n                        <ul>\n                            ${word.usages.map(usage => `\n                                <li>\n                                    <strong>Mi'gmaq Translation:</strong> ${usage.translation}<br>\n                                    <strong>English Translation:</strong> ${usage.english}\n                                </li>\n                            `).join('')}\n                        </ul>\n                    </div>\n                </a>\n            `;\n            wordDiv.addEventListener('mouseover', () => applyHoverEffect(wordDiv, true));\n            wordDiv.addEventListener('mouseout', () => applyHoverEffect(wordDiv, false));\n            dictionaryContainer.appendChild(wordDiv);\n        });\n\n        applyTheme(); // Ensure dark mode classes are applied after appending new elements\n    }\n\n    // Create pagination controls\n    function createPagination(totalItems) {\n        const totalPages = Math.ceil(totalItems / itemsPerPage);\n        paginationContainer.innerHTML = '';\n\n        paginationContainer.appendChild(createPaginationButton('Previous', currentPage > 1, currentPage - 1));\n\n        const pageInput = document.createElement('input');\n        pageInput.type = 'number';\n        pageInput.min = 1;\n        pageInput.max = totalPages;\n        pageInput.value = currentPage;\n        pageInput.className = 'px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white rounded-md mx-2 w-16 text-center';\n        pageInput.addEventListener('change', () => {\n            const pageNumber = parseInt(pageInput.value);\n            if (pageNumber >= 1 && pageNumber <= totalPages) {\n                currentPage = pageNumber;\n                displayDictionary(filteredData);\n                createPagination(filteredData.length);\n            } else {\n                alert(`Please enter a valid page number between 1 and ${totalPages}.`);\n            }\n        });\n        paginationContainer.appendChild(pageInput);\n\n        const totalPagesLabel = document.createElement('span');\n        totalPagesLabel.textContent = `of ${totalPages}`;\n        totalPagesLabel.className = 'text-gray-900 dark:text-white mx-2';\n        paginationContainer.appendChild(totalPagesLabel);\n\n        paginationContainer.appendChild(createPaginationButton('Next', currentPage < totalPages, currentPage + 1));\n\n        applyTheme();\n    }\n\n    // Create a pagination button\n    function createPaginationButton(text, enabled, page) {\n        const button = document.createElement('button');\n        button.textContent = text;\n        button.className = 'px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white rounded-md mx-2 hover:bg-gray-300 dark:hover:bg-gray-600';\n        button.disabled = !enabled;\n        if (enabled) {\n            button.addEventListener('click', () => {\n                currentPage = page;\n                displayDictionary(filteredData);\n                createPagination(filteredData.length);\n            });\n        }\n        return button;\n    }\n\n    // Apply the current theme (dark or light)\n    function applyTheme() {\n        const isDarkMode = document.body.classList.contains('dark-mode');\n        document.querySelectorAll('.word-item').forEach(item => {\n            item.style.backgroundColor = isDarkMode ? '#2d3748' : '#f7fafc';\n            item.style.color = isDarkMode ? '#ffffff' : '#1a202c';\n        });\n        document.querySelectorAll('a.block').forEach(link => {\n            link.style.color = isDarkMode ? '#ffffff' : '#1a202c';\n        });\n        document.querySelectorAll('.pagination button').forEach(button => {\n            button.style.backgroundColor = isDarkMode ? '#2d3748' : '#f7fafc';\n            button.style.color = isDarkMode ? '#ffffff' : '#1a202c';\n        });\n        // Apply dark mode to search input and filter select\n        searchInput.style.backgroundColor = isDarkMode ? '#2d3748' : '#f7fafc';\n        searchInput.style.color = isDarkMode ? '#ffffff' : '#1a202c';\n        filterSelect.style.backgroundColor = isDarkMode ? '#2d3748' : '#f7fafc';\n        filterSelect.style.color = isDarkMode ? '#ffffff' : '#1a202c';\n        // Apply dark mode to pagination label\n        const totalPagesLabel = document.querySelector('.pagination span');\n        if (totalPagesLabel) {\n            totalPagesLabel.style.color = isDarkMode ? '#ffffff' : '#1a202c';\n        }\n\n        // Toggle icon visibility based on theme\n        if (isDarkMode) {\n            instructionsIconLight.classList.add('hidden');\n            instructionsIconDark.classList.remove('hidden');\n        } else {\n            instructionsIconLight.classList.remove('hidden');\n            instructionsIconDark.classList.add('hidden');\n        }\n\n        // Apply dark or light mode to the close button\n        if (closeButton) {\n            if (isDarkMode) {\n                closeButton.classList.remove('light-mode');\n            } else {\n                closeButton.classList.add('light-mode');\n            }\n        }\n    }\n\n    // Apply hover effect for word items\n    function applyHoverEffect(element, isHover) {\n        const isDarkMode = document.body.classList.contains('dark-mode');\n        element.style.backgroundColor = isHover \n            ? (isDarkMode ? '#4a5568' : '#e2e8f0') \n            : (isDarkMode ? '#2d3748' : '#f7fafc');\n    }\n\n    // Display an error message\n    function displayError(message) {\n        dictionaryContainer.innerHTML = `<p class='error text-gray-500 text-center dark:text-white'>${message}</p>`;\n    }\n\n    // Toggle instructions modal\n    function toggleInstructionsModal(show) {\n        if (show) {\n            instructionsModal.classList.add('active');\n            document.body.style.overflow = 'hidden'; // Prevent background scrolling\n        } else {\n            instructionsModal.classList.remove('active');\n            document.body.style.overflow = 'auto'; // Re-enable background scrolling\n        }\n    }\n});",
                "notes": "This file contains the core logic for managing the dictionary feature of the application, including search, filtering, and pagination. Ensure the paths to the elements in the HTML structure match those referenced in this script."
            }
        },
        {
            "id": "12",
            "name": "documentation.js",
            "path": "client/js/documentation.js",
            "description": "JavaScript file for handling documentation page.",
            "details": {
                "purpose": "Fetches project structure JSON and displays it on the documentation page.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    fetchProjectStructure();\n\n    document.getElementById('searchInput').addEventListener('keyup', searchFunction);\n    initializeResizer();\n});\n\nfunction fetchProjectStructure() {\n    fetch('../assets/documentation.json')\n        .then(response => response.json())\n        .then(data => renderProjectStructure(data))\n        .catch(error => console.error('Error loading JSON:', error));\n}\n\nfunction renderProjectStructure(data) {\n    const documentationContainer = document.getElementById('documentation');\n    documentationContainer.innerHTML = '';\n    data.forEach(item => {\n        documentationContainer.appendChild(createNode(item));\n    });\n}\n\nfunction createNode(item) {\n    const element = document.createElement('div');\n    element.className = item.children ? 'directory' : 'file';\n    element.setAttribute('data-name', item.name.toLowerCase());\n    element.setAttribute('data-description', item.description.toLowerCase());\n\n    const header = document.createElement('div');\n    header.textContent = item.name;\n    header.className = 'cursor-pointer';\n    element.appendChild(header);\n\n    if (item.children) {\n        const childrenContainer = createChildrenContainer(item.children);\n        element.appendChild(childrenContainer);\n        header.addEventListener('click', () => {\n            childrenContainer.style.display = childrenContainer.style.display === 'none' ? 'block' : 'none';\n        });\n    } else {\n        header.addEventListener('click', () => {\n            displayDetails(item);\n        });\n    }\n\n    return element;\n}\n\nfunction createChildrenContainer(children) {\n    const childrenContainer = document.createElement('div');\n    childrenContainer.className = 'children';\n    children.forEach(child => {\n        childrenContainer.appendChild(createNode(child));\n    });\n    return childrenContainer;\n}\n\nfunction displayDetails(item) {\n    const mainContent = document.getElementById('mainContent');\n    mainContent.innerHTML = `\n        <h2>${item.name}</h2>\n        <p><strong>Description:</strong> ${item.description}</p>\n        <p><strong>Purpose:</strong> ${item.details.purpose}</p>\n        <div class=\"details\">\n            <p><strong>Content:</strong></p>\n            <pre>${typeof item.details.content === 'object' \n                ? JSON.stringify(item.details.content, null, 2) \n                : item.details.content.replace(/\\n/g, '<br>').replace(/ /g, '&nbsp;')}\n            </pre>\n            <p><strong>Notes:</strong> ${item.details.notes}</p>\n        </div>\n    `;\n}\n\nfunction searchFunction() {\n    const input = document.getElementById('searchInput').value.toLowerCase();\n    const elements = document.querySelectorAll('#documentation .directory, #documentation .file');\n\n    elements.forEach(element => {\n        const name = element.getAttribute('data-name');\n        const description = element.getAttribute('data-description');\n        if (name.includes(input) || description.includes(input)) {\n            element.classList.remove('hidden');\n        } else {\n            element.classList.add('hidden');\n        }\n    });\n}\n\nfunction initializeResizer() {\n    const resizer = document.getElementById('resizer');\n    const sidebar = document.getElementById('sidebar');\n    let isResizing = false;\n\n    resizer.addEventListener('mousedown', (e) => {\n        isResizing = true;\n        document.addEventListener('mousemove', resizeSidebar);\n        document.addEventListener('mouseup', stopResizing);\n    });\n\n    function resizeSidebar(e) {\n        if (!isResizing) return;\n        const newWidth = e.clientX;\n        if (newWidth >= 200 && newWidth <= 400) {\n            sidebar.style.width = newWidth + 'px';\n        }\n    }\n\n    function stopResizing() {\n        isResizing = false;\n        document.removeEventListener('mousemove', resizeSidebar);\n        document.removeEventListener('mouseup', stopResizing);\n    }\n}\n",
                "notes": "This JavaScript file manages the documentation page by fetching and rendering the project structure from a JSON file. It includes functions for dynamic creation of documentation nodes, search functionality to filter displayed nodes, and a resizer for the sidebar. Ensure the project structure JSON is correctly formatted and the required DOM elements are present in the HTML."
            }
        },
        {
            "id": "13",
            "name": "index.js",
            "path": "client/js/index.js",
            "description": "Main JavaScript file for the homepage.",
            "details": {
                "purpose": "Handles theme toggling and other homepage functionalities.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    const themeToggle = document.getElementById('theme-toggle');\n    const body = document.body;\n\n    themeToggle.addEventListener('click', () => {\n        body.classList.toggle('dark-mode');\n        body.classList.toggle('light-mode');\n        applyTheme();\n    });\n\n    function applyTheme() {\n        const isDarkMode = body.classList.contains('dark-mode');\n        document.querySelectorAll('.section').forEach(section => {\n            section.style.backgroundColor = isDarkMode ? '#1a202c' : '#ffffff';\n            section.style.color = isDarkMode ? '#f9f9f9' : '#000000';\n        });\n    }\n\n    applyTheme(); // Apply the initial theme\n});",
                "notes": "Includes event listeners for theme toggling and functions to apply the current theme."
            }
        },
        {
            "id": "14",
            "name": "word-details.js",
            "path": "client/js/word-details.js",
            "description": "JavaScript file for displaying word details.",
            "details": {
                "purpose": "Fetches and displays detailed information for a specific word.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    const queryParams = new URLSearchParams(window.location.search);\n    const word = queryParams.get('word'); // Get the 'word' query parameter from the URL\n\n    if (!word) {\n        console.error('No word parameter found in URL.');\n        return;\n    }\n\n    // Get references to various HTML elements\n    const wordDetailsContainer = document.getElementById('word-details-container');\n    const aiFactContainer = document.getElementById('ai-fact-container');\n    const commentsContainer = document.getElementById('comments-container');\n    const commentForm = document.getElementById('comment-form');\n    const wordIdInput = document.getElementById('word_id');\n    const parentIdInput = document.getElementById('parent_id');\n\n    if (word) {\n        wordIdInput.value = word; // Set the wordId input value\n    }\n\n    // Fetch and display word details and comments\n    Promise.all([\n        fetchWordDetails(word),\n        fetchComments(word)\n    ]).finally(() => {\n        // Hide preloader after word details and comments are loaded\n        const preloader = document.getElementById('preloader');\n        preloader.style.display = 'none';\n        \n        // Fetch AI fact after main content is loaded\n        fetchWordDetails(word).then(wordDetails => {\n            const type = wordDetails.type;\n            const translations = wordDetails.usages.map(usage => usage.translation).join(', ');\n            const definitions = wordDetails.definitions.join(', ');\n            fetchAiFact(word, type, translations, definitions);\n        });\n    });\n\n    // Add event listeners for comment form and reply button clicks\n    commentForm.addEventListener('submit', handleCommentSubmit);\n    commentsContainer.addEventListener('click', handleReplyButtonClick);\n    commentsContainer.addEventListener('submit', handleReplyFormSubmit);\n\n    // Add event listener for theme toggle\n    const themeToggle = document.getElementById('theme-toggle');\n    themeToggle.addEventListener('click', () => {\n        document.body.classList.toggle('dark-mode');\n        document.body.classList.toggle('light-mode');\n        applyTheme();\n    });\n\n    applyTheme(); // Apply the initial theme\n\n    // Function to fetch word details from the server\n    function fetchWordDetails(word) {\n        return fetch(`/api/word-details?word=${encodeURIComponent(word)}`)\n            .then(response => response.json())\n            .then(wordDetails => {\n                displayWordDetails(wordDetails);\n                return wordDetails;\n            })\n            .catch(error => {\n                console.error('Error fetching word details:', error);\n                displayError();\n            });\n    }\n\n    // Function to fetch AI fact from the server\n    function fetchAiFact(word, type, translations, definitions) {\n        return fetch(`/api/fact?word=${encodeURIComponent(word)}&type=${encodeURIComponent(type)}&translations=${encodeURIComponent(translations)}&definitions=${encodeURIComponent(definitions)}`)\n            .then(response => response.json())\n            .then(data => displayAiFact(data.fact))\n            .catch(error => {\n                console.error('Error fetching AI fact:', error);\n                aiFactContainer.innerHTML = '<p class=\"error text-white-500 text-center\">Error fetching AI fact. Please try again later.</p>';\n            });\n    }\n\n    // Function to display word details in the HTML\n    function displayWordDetails(wordDetails) {\n        const wordHTML = `\n            <div class=\"word-item rounded-md\">\n                <h2 class=\"text-3xl font-bold mb-6 text-center\">${wordDetails.word}</h2>\n                <div class=\"mb-6\">\n                    <strong class=\"block text-xl mb-3\">Part of Speech:</strong>\n                    <span class=\"block text-lg\">${wordDetails.type}</span>\n                </div>\n                <div class=\"mb-6\">\n                    <strong class=\"block text-xl mb-3\">English Definitions:</strong>\n                    <ul class=\"list-disc list-inside text-lg\">\n                        ${wordDetails.definitions.map(def => `<li>${def}</li>`).join('')}\n                    </ul>\n                </div>\n                <div class=\"mb-6\">\n                    <strong class=\"block text-xl mb-3\">Translations:</strong>\n                    <ul class=\"text-lg\">\n                        ${wordDetails.usages.map(usage => `\n                            <li class=\"mb-4\">\n                                <strong>Mi'gmaq Translation:</strong> ${usage.translation}<br>\n                                <strong>English Translation:</strong> ${usage.english}\n                            </li>\n                        `).join('')}\n                    </ul>\n                </div>\n            </div>\n        `;\n        wordDetailsContainer.innerHTML = wordHTML;\n        applyTheme(); // Apply theme to newly added elements\n    }\n\n    // Function to display AI fact in the HTML\n    function displayAiFact(fact) {\n        aiFactContainer.innerHTML = `<p class=\"text-2xl font-medium text-center\">${fact}</p>`;\n        applyTheme(); // Apply theme to newly added elements\n    }\n\n    // Function to display an error message\n    function displayError() {\n        wordDetailsContainer.innerHTML = '<p class=\"error text-white-500 text-center\">Error fetching word details. Please try again later.</p>';\n    }\n\n    // Function to fetch comments from the server\n    function fetchComments(wordId) {\n        return fetch(`/api/comments?word_id=${encodeURIComponent(wordId)}`)\n            .then(response => response.json())\n            .then(comments => {\n                commentsContainer.innerHTML = ''; // Clear previous comments\n                const nestedComments = buildNestedComments(comments);\n                displayComments(nestedComments);\n            })\n            .catch(error => {\n                console.error('Error fetching comments:', error);\n                commentsContainer.innerHTML = '<p class=\"error text-white-500 text-center\">Error fetching comments. Please try again later.</p>';\n            });\n    }\n\n    // Function to build nested comments structure\n    function buildNestedComments(comments) {\n        const commentMap = {};\n        comments.forEach(comment => {\n            comment.replies = [];\n            commentMap[comment.id] = comment;\n        });\n\n        const nestedComments = [];\n        comments.forEach(comment => {\n            if (comment.parent_id) {\n                commentMap[comment.parent_id].replies.push(comment);\n            } else {\n                nestedComments.push(comment);\n            }\n        });\n\n        return nestedComments;\n    }\n\n    // Function to display comments in the HTML\n    function displayComments(comments, parentElement = null, level = 0) {\n        const commentsList = parentElement || document.createElement('ul');\n        if (!parentElement) commentsContainer.appendChild(commentsList);\n\n        comments.forEach(comment => {\n            const commentItem = createCommentItem(comment, level);\n            commentsList.appendChild(commentItem);\n            if (comment.replies.length > 0) {\n                const replyList = document.createElement('ul');\n                commentItem.appendChild(replyList);\n                displayComments(comment.replies, replyList, level + 1);\n            }\n        });\n        applyTheme(); // Apply theme to newly added elements\n    }\n\n    // Function to create a comment item in the HTML\n    function createCommentItem(comment, level) {\n        const commentItem = document.createElement('li');\n        commentItem.classList.add('bg-gray-800', 'p-4', 'rounded-md', 'mt-4', 'comment-item', 'flex', 'flex-col', 'space-y-2');\n        if (level > 0) {\n            commentItem.classList.add('ml-12', 'border-l-2', 'border-gray-700', 'pl-4');\n        }\n\n        const avatar = generateAvatar(comment.name);\n        const commentHeader = document.createElement('div');\n        commentHeader.classList.add('flex', 'items-start', 'space-x-4');\n\n        const avatarWrapper = document.createElement('div');\n        avatarWrapper.innerHTML = avatar;\n        commentHeader.appendChild(avatarWrapper);\n\n        const commentContent = document.createElement('div');\n        commentContent.classList.add('flex', 'flex-col', 'space-y-1', 'flex-grow');\n\n        const commentAuthor = document.createElement('div');\n        commentAuthor.classList.add('flex', 'items-center', 'justify-between', 'mt-1');\n\n        const authorNameDate = document.createElement('div');\n        authorNameDate.classList.add('flex', 'flex-col');\n\n        const authorName = document.createElement('p');\n        authorName.classList.add('flex', 'text-lg', 'font-semibold');\n        authorName.textContent = comment.name;\n\n        const commentDate = document.createElement('p');\n        commentDate.classList.add('text-sm', 'text-gray-400');\n        commentDate.textContent = new Date(comment.created_at).toLocaleString(); // Format the timestamp to local time\n\n        authorNameDate.appendChild(authorName);\n        authorNameDate.appendChild(commentDate);\n\n        commentAuthor.appendChild(authorNameDate);\n\n        const commentText = document.createElement('p');\n        commentText.classList.add('flex', 'text-lg', 'font-medium');\n        commentText.textContent = comment.content;\n\n        commentContent.appendChild(commentAuthor);\n        commentContent.appendChild(commentText);\n\n        commentHeader.appendChild(commentContent);\n        commentItem.appendChild(commentHeader);\n\n        const replyButton = document.createElement('button');\n        replyButton.classList.add('reply-button', 'mt-2', 'text-blue-400', 'hover:text-blue-300', 'transition', 'duration-200', 'self-start');\n        replyButton.setAttribute('data-comment-id', comment.id);\n        replyButton.textContent = 'Reply';\n\n        const replyForm = createReplyForm(comment.id);\n\n        commentItem.appendChild(replyButton);\n        commentItem.appendChild(replyForm);\n\n        return commentItem;\n    }\n\n    // Function to create a reply form for a comment\n    function createReplyForm(commentId) {\n        const replyForm = document.createElement('form');\n        replyForm.classList.add('reply-form', 'hidden', 'mt-2', 'flex', 'flex-col', 'space-y-2');\n        replyForm.setAttribute('data-comment-id', commentId);\n\n        const replyName = document.createElement('input');\n        replyName.classList.add('reply-name', 'w-full', 'p-2', 'rounded-md', 'bg-gray-900');\n        replyName.setAttribute('type', 'text');\n        replyName.setAttribute('name', 'name');\n        replyName.setAttribute('placeholder', 'Your Name');\n\n        const replyContent = document.createElement('textarea');\n        replyContent.classList.add('reply-content', 'w-full', 'p-2', 'rounded-md', 'bg-gray-900');\n        replyContent.setAttribute('name', 'content');\n        replyContent.setAttribute('placeholder', 'Your Reply');\n\n        const parentId = document.createElement('input');\n        parentId.setAttribute('type', 'hidden');\n        parentId.setAttribute('name', 'parent_id');\n        parentId.setAttribute('value', commentId);\n\n        const wordId = document.createElement('input');\n        wordId.setAttribute('type', 'hidden');\n        wordId.setAttribute('name', 'word_id');\n        wordId.setAttribute('value', word);\n\n        const submitButton = document.createElement('button');\n        submitButton.classList.add('reply-submit', 'bg-blue-500', 'hover:bg-blue-400', 'text-white', 'p-2', 'rounded-md', 'transition', 'duration-200');\n        submitButton.setAttribute('type', 'submit');\n        submitButton.textContent = 'Submit Reply';\n\n        replyForm.appendChild(replyName);\n        replyForm.appendChild(replyContent);\n        replyForm.appendChild(parentId);\n        replyForm.appendChild(wordId);\n        replyForm.appendChild(submitButton);\n\n        return replyForm;\n    }\n\n    // Function to handle comment submission\n    function handleCommentSubmit(event) {\n        event.preventDefault();\n        const form = event.target;\n        const formData = new FormData(form);\n        submitCommentForm(formData);\n    }\n\n    // Function to handle reply button click\n    function handleReplyButtonClick(event) {\n        if (event.target.classList.contains('reply-button')) {\n            const replyForm = event.target.nextElementSibling;\n            replyForm.classList.toggle('hidden');\n        }\n    }\n\n    // Function to handle reply form submission\n    function handleReplyFormSubmit(event) {\n        if (event.target.classList.contains('reply-form')) {\n            event.preventDefault();\n            const form = event.target;\n            const formData = new FormData(form);\n            submitCommentForm(formData);\n            form.classList.add('hidden');\n        }\n    }\n\n    // Function to submit a comment form\n    function submitCommentForm(formData) {\n        fetch('/api/comments', {\n            method: 'POST',\n            body: formData\n        })\n            .then(response => response.json())\n            .then(comment => {\n                const parentCommentId = formData.get('parent_id');\n                if (parentCommentId) {\n                    const parentComment = commentsContainer.querySelector(`li[data-comment-id='${parentCommentId}']`);\n                    const replyList = parentComment.querySelector('ul') || document.createElement('ul');\n                    if (!parentComment.contains(replyList)) parentComment.appendChild(replyList);\n                    const commentItem = createCommentItem(comment, replyList.dataset.level || 1);\n                    replyList.appendChild(commentItem);\n                } else {\n                    const commentItem = createCommentItem(comment, 0);\n                    commentsContainer.querySelector('ul').appendChild(commentItem);\n                }\n                applyTheme(); // Apply theme to newly added elements\n            })\n            .catch(error => {\n                console.error('Error submitting comment:', error);\n            });\n    }\n\n    // Function to generate an avatar based on the name\n    function generateAvatar(name) {\n        const initials = name.split(' ').map(word => word[0].toUpperCase()).join('');\n        const avatarColors = [\n            '#E57373', '#F06292', '#BA68C8', '#9575CD',\n            '#7986CB', '#64B5F6', '#4FC3F7', '#4DB6AC',\n            '#81C784', '#AED581', '#DCE775', '#FFD54F',\n            '#FFB74D', '#FF8A65', '#A1887F', '#90A4AE'\n        ];\n        const color = avatarColors[Math.floor(Math.random() * avatarColors.length)];\n        return `\n            <div class=\"flex items-center justify-center w-12 h-12 rounded-full\" style=\"background-color: ${color};\">\n                <span class=\"text-white text-lg font-medium\">${initials}</span>\n            </div>\n        `;\n    }\n\n    function applyTheme() {\n        const isDarkMode = document.body.classList.contains('dark-mode');\n        document.querySelectorAll('.comment-item').forEach(commentItem => {\n            commentItem.style.backgroundColor = isDarkMode ? '#2d3748' : '#ffffff';\n            commentItem.style.color = isDarkMode ? '#f9f9f9' : '#1a202c';\n        });\n    }\n\n});",
                "notes": "Includes functions to fetch word details, display them, and handle comments."
            }
        },
        {
            "id": "15",
            "name": "wordOfTheDay.js",
            "path": "client/js/wordOfTheDay.js",
            "description": "JavaScript file for displaying the word of the day.",
            "details": {
                "purpose": "Fetches and displays the word of the day from the API.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    const wordOfTheDayContainer = document.getElementById('word-of-the-day-container');\n    const preloader = document.getElementById('preloader');\n\n    // Fetch the word of the day from the API\n    fetch('/api/word-of-the-day')\n        .then(response => response.json())\n        .then(data => {\n            displayWordOfTheDay(data);\n            preloader.style.display = 'none'; // Hide the preloader after loading the word of the day\n        })\n        .catch(error => {\n            console.error('Error fetching word of the day:', error);\n            preloader.style.display = 'none';\n            wordOfTheDayContainer.innerHTML = '<p class=\"text-red-500 text-center\">Error loading word of the day. Please try again later.</p>';\n        });\n\n    // Display the word of the day in the HTML\n    function displayWordOfTheDay(word) {\n        const wordHTML = `\n            <div class=\"word-item rounded-md\">\n                <h2 class=\"text-3xl font-bold mb-6 text-center\">${word.word}</h2>\n                <div class=\"mb-6\">\n                    <strong class=\"block text-xl mb-3\">Part of Speech:</strong>\n                    <span class=\"block text-lg\">${word.type}</span>\n                </div>\n                <div class=\"mb-6\">\n                    <strong class=\"block text-xl mb-3\">English Definitions:</strong>\n                    <ul class=\"list-disc list-inside text-lg\">\n                        ${word.definitions.map(def => `<li>${def}</li>`).join('')}\n                    </ul>\n                </div>\n                <div class=\"mb-6\">\n                    <strong class=\"block text-xl mb-3\">Translations:</strong>\n                    <ul class=\"text-lg\">\n                        ${word.translations.map(trans => `<li>${trans}</li>`).join('')}\n                    </ul>\n                </div>\n            </div>\n        `;\n        wordOfTheDayContainer.innerHTML = wordHTML;\n        applyTheme(); // Apply theme to newly added elements\n    }\n\n    // Theme Toggle\n    const themeToggle = document.getElementById('theme-toggle');\n    themeToggle.addEventListener('click', () => {\n        document.body.classList.toggle('dark-mode');\n        document.body.classList.toggle('light-mode');\n        applyTheme();\n    });\n\n    function applyTheme() {\n        const isDarkMode = document.body.classList.contains('dark-mode');\n        document.querySelectorAll('.word-item').forEach(item => {\n            item.style.backgroundColor = isDarkMode ? '#2d3748' : '#ffffff';\n            item.style.color = isDarkMode ? '#f9f9f9' : '#1a202c';\n        });\n    }\n\n    applyTheme(); // Apply the initial theme\n});",
                "notes": "Includes functions to fetch and display the word of the day."
            }
        },
        {
            "id": "16",
            "name": "theme-toggle.js",
            "path": "client/js/utils/theme-toggle.js",
            "description": "JavaScript file for toggling the theme.",
            "details": {
                "purpose": "Handles theme switching between light and dark modes.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    const themeToggle = document.getElementById('theme-toggle');\n    const body = document.body;\n    const navbar = document.getElementById('navbar');\n    const instructionsIconLight = document.getElementById('instructionsIconLight');\n    const instructionsIconDark = document.getElementById('instructionsIconDark');\n    const githubIcon = document.querySelector('.icon[alt=\"GitHub\"]');\n    const instructionsModal = document.getElementById('instructionsModal');\n    const closeButton = document.querySelector('.modal-close-button');\n\n    // Load the saved theme from localStorage, default to dark-mode if not set\n    const savedTheme = localStorage.getItem('theme') || 'dark-mode';\n    body.classList.remove('light-mode', 'dark-mode');\n    body.classList.add(savedTheme);\n    navbar.classList.remove('light-mode', 'dark-mode');\n    navbar.classList.add(savedTheme);\n\n    // Set the initial icon based on the theme\n    themeToggle.src = savedTheme === 'dark-mode' ? 'https://img.icons8.com/ios-glyphs/30/ffffff/moon-symbol.png' : 'https://img.icons8.com/ios-glyphs/30/000000/sun.png';\n    instructionsIconLight.classList.toggle('hidden', savedTheme === 'dark-mode');\n    instructionsIconDark.classList.toggle('hidden', savedTheme === 'light-mode');\n    githubIcon.src = savedTheme === 'dark-mode' ? 'https://img.icons8.com/material-outlined/24/ffffff/github.png' : 'https://img.icons8.com/material-outlined/24/000000/github.png';\n\n    // Toggle the theme on button click\n    themeToggle.addEventListener('click', () => {\n        if (body.classList.contains('light-mode')) {\n            body.classList.remove('light-mode');\n            body.classList.add('dark-mode');\n            navbar.classList.remove('light-mode');\n            navbar.classList.add('dark-mode');\n            themeToggle.src = 'https://img.icons8.com/ios-glyphs/30/ffffff/moon-symbol.png';\n            instructionsIconLight.classList.add('hidden');\n            instructionsIconDark.classList.remove('hidden');\n            githubIcon.src = 'https://img.icons8.com/material-outlined/24/ffffff/github.png';\n            localStorage.setItem('theme', 'dark-mode');\n        } else {\n            body.classList.remove('dark-mode');\n            body.classList.add('light-mode');\n            navbar.classList.remove('dark-mode');\n            navbar.classList.add('light-mode');\n            themeToggle.src = 'https://img.icons8.com/ios-glyphs/30/000000/sun.png';\n            instructionsIconLight.classList.remove('hidden');\n            instructionsIconDark.classList.add('hidden');\n            githubIcon.src = 'https://img.icons8.com/material-outlined/24/000000/github.png';\n            localStorage.setItem('theme', 'light-mode');\n        }\n    });\n\n    // Toggle instructions modal\n    window.toggleInstructionsModal = function(show) {  // <-- Expose the function globally\n        if (show) {\n            instructionsModal.classList.add('active');\n            document.body.style.overflow = 'hidden'; // Prevent background scrolling\n        } else {\n            instructionsModal.classList.remove('active');\n            document.body.style.overflow = 'auto'; // Re-enable background scrolling\n        }\n    }\n\n    // Add event listeners for the instruction icons and close button\n    instructionsIconLight.addEventListener('click', () => toggleInstructionsModal(true));\n    instructionsIconDark.addEventListener('click', () => toggleInstructionsModal(true));\n    closeButton.addEventListener('click', () => toggleInstructionsModal(false));\n\n    // Close modal when clicking outside of it\n    window.addEventListener('click', (event) => {\n        if (event.target === instructionsModal) {\n            toggleInstructionsModal(false);\n        }\n    });\n});",
                "notes": "Includes functions to toggle between light and dark themes and apply the selected theme."
            }
        },
        {
            "id": "17",
            "name": "flashcard.js",
            "path": "client/js/games/flashcard.js",
            "description": "JavaScript file for the flashcard game functionality.",
            "details": {
                "purpose": "Implements the logic for a flashcard game, including card flipping and game logic.",
                "content": "document.addEventListener('DOMContentLoaded', function() {\n    const memoryGame = document.getElementById('memory-game');\n    let hasFlippedCard = false;\n    let lockBoard = false;\n    let firstCard, secondCard;\n    let matchedPairs = 0;\n\n    // Function to fetch game data from the server\n    async function fetchGameData() {\n        try {\n            const response = await fetch('/api/games/flashcard');\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching game data:', error);\n            return null;\n        }\n    }\n\n    // Function to create memory cards\n    function createMemoryCards(words) {\n        memoryGame.innerHTML = ''; // Clear existing cards\n        matchedPairs = 0; // Reset matched pairs count\n        words.forEach(wordObj => {\n            const card = document.createElement('div');\n            card.classList.add('memory-card');\n            card.dataset.framework = wordObj.word;\n\n            const frontFace = document.createElement('div');\n            frontFace.classList.add('front-face');\n            frontFace.innerHTML = `<div class=\"word\">${wordObj.word}</div><div class=\"definition\">${wordObj.definition}</div>`;\n\n            const backFace = document.createElement('div');\n            backFace.classList.add('back-face');\n            backFace.textContent = '?'; // Placeholder symbol\n\n            card.appendChild(frontFace);\n            card.appendChild(backFace);\n\n            card.addEventListener('click', flipCard);\n            memoryGame.appendChild(card);\n        });\n\n        // Shuffle the cards\n        (function shuffle() {\n            const cards = document.querySelectorAll('.memory-card');\n            cards.forEach(card => {\n                let randomPos = Math.floor(Math.random() * 12);\n                card.style.order = randomPos;\n            });\n        })();\n    }\n\n    // Function to flip a card\n    function flipCard() {\n        if (lockBoard) return;\n        if (this === firstCard) return;\n\n        this.classList.add('flip');\n\n        if (!hasFlippedCard) {\n            hasFlippedCard = true;\n            firstCard = this;\n            return;\n        }\n\n        secondCard = this;\n        checkForMatch();\n    }\n\n    // Function to check if two cards match\n    function checkForMatch() {\n        let isMatch = firstCard.dataset.framework === secondCard.dataset.framework;\n        isMatch ? disableCards() : unflipCards();\n    }\n\n    // Function to disable matched cards\n    function disableCards() {\n        firstCard.removeEventListener('click', flipCard);\n        secondCard.removeEventListener('click', flipCard);\n        firstCard.classList.add('glow');\n        secondCard.classList.add('glow');\n        matchedPairs += 1; // Increment matched pairs count\n        if (matchedPairs === 6) { // All pairs matched\n            setTimeout(restartGame, 1500); // Restart game after a short delay\n        }\n        resetBoard();\n    }\n\n    // Function to unflip unmatched cards\n    function unflipCards() {\n        lockBoard = true;\n        setTimeout(() => {\n            firstCard.classList.remove('flip');\n            secondCard.classList.remove('flip');\n            resetBoard();\n        }, 1500);\n    }\n\n    // Function to reset the board\n    function resetBoard() {\n        [hasFlippedCard, lockBoard] = [false, false];\n        [firstCard, secondCard] = [null, null];\n    }\n\n    // Function to restart the game\n    async function restartGame() {\n        const gameData = await fetchGameData();\n        if (gameData) {\n            createMemoryCards(gameData);\n        } else {\n            memoryGame.innerHTML = '<p class=\"text-red-500\">Failed to load game data. Please try again later.</p>';\n        }\n    }\n\n    // Initialize the game\n    async function init() {\n        await restartGame();\n        applyTheme(); // Apply the current theme initially\n    }\n\n    // Theme Toggle\n    const themeToggle = document.getElementById('theme-toggle');\n    themeToggle.addEventListener('click', () => {\n        document.body.classList.toggle('dark-mode');\n        applyTheme();\n    });\n\n    function applyTheme() {\n        const isDarkMode = document.body.classList.contains('dark-mode');\n        document.querySelectorAll('.memory-card').forEach(card => {\n            card.style.backgroundColor = isDarkMode ? '#2d3748' : '#f7fafc';\n            card.style.color = isDarkMode ? '#f9f9f9' : '#1a202c';\n        });\n    }\n\n    init();\n});",
                "notes": "Includes functions to manage the flashcard game state, card flipping animations, and scoring."
            }
        },
        {
            "id": "29",
            "name": "resourcesService.js",
            "path": "server/services/resources/resourcesService.js",
            "description": "JavaScript file for resource services.",
            "details": {
                "purpose": "Service layer for handling resource-related operations.",
                "content": "// resourcesService.js content goes here.",
                "notes": "Currently empty. To be implemented."
            }
        },
        {
            "id": "30",
            "name": "lessonsService.js",
            "path": "server/services/lessons/lessonsService.js",
            "description": "JavaScript file for lesson services.",
            "details": {
                "purpose": "Service layer for handling lesson-related operations.",
                "content": "// lessonsService.js content goes here.",
                "notes": "Currently empty. To be implemented."
            }
        },
        {
            "id": "31",
            "name": "app.js",
            "path": "server/app.js",
            "description": "Main application file for the server.",
            "details": {
                "purpose": "Sets up the server with routes and middleware.",
                "content": "const express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nconst dictionaryRoutes = require('./routes/dictionaryRoutes');\nconst wordOfTheDayRoutes = require('./routes/wordOfTheDayRoutes');\nconst aiRoutes = require('./routes/aiRoutes');\nconst commentsRoutes = require('./routes/commentsRoutes');\nconst gamesRoutes = require('./routes/games/gamesRoutes');\n\nconst app = express();\n\n// Middleware setup\napp.use(cors());\napp.use(express.json());\napp.use(express.static(path.join(__dirname, '..', 'client')));\n\n// Route setup\napp.use('/api', dictionaryRoutes);\napp.use('/api', wordOfTheDayRoutes);\napp.use('/api', aiRoutes);\napp.use('/api', commentsRoutes);\napp.use('/api/games', gamesRoutes);\n\n// Serve HTML files for different routes\napp.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, '..', 'client', 'pages', 'index.html'));\n});\n\napp.get('/education', (req, res) => {\n    res.sendFile(path.join(__dirname, '..', 'client', 'pages', 'education.html'));\n});\n\napp.get('/dictionary', (req, res) => {\n    res.sendFile(path.join(__dirname, '..', 'client', 'pages', 'dictionary.html'));\n});\n\napp.get('/word-details', (req, res) => {\n    res.sendFile(path.join(__dirname, '..', 'client', 'pages', 'word-details.html'));\n});\n\napp.get('/games/flashcard', (req, res) => {\n    res.sendFile(path.join(__dirname, '..', 'client', 'games', 'flashcard.html'));\n});\n\n// Catch-all to serve HTML files correctly from any nested route\napp.get('/*', (req, res) => {\n    const filePath = path.join(__dirname, '..', 'client', 'pages', req.params[0]);\n    res.sendFile(filePath, (err) => {\n        if (err) {\n            res.status(404).send('Not Found');\n        }\n    });\n});\n\nmodule.exports = app;",
                "notes": "Sets up the Express application with routes and middleware."
            }
        },
        {
            "id": "32",
            "name": "server.js",
            "path": "server/server.js",
            "description": "Server entry point.",
            "details": {
                "purpose": "Starts the server and sets up the cron job for updating the word of the day.",
                "content": "require('dotenv').config();\nconst app = require('./app');\nconst cron = require('node-cron');\nconst axios = require('axios');\n\nconst port = process.env.PORT || 3001;\n\napp.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n});\n\n// Schedule the cron job to run daily at midnight\ncron.schedule('0 0 * * *', async () => {\n    try {\n        await axios.put(`http://localhost:${port}/api/word-of-the-day/update`);\n        console.log('Word of the Day updated successfully');\n    } catch (error) {\n        console.error('Error updating Word of the Day:', error);\n    }\n});",
                "notes": "Includes server setup and cron job scheduling for daily updates."
            }
        },
        {
            "id": "33",
            "name": "aiService.js",
            "path": "server/services/aiService.js",
            "description": "Service for interacting with the OpenAI API.",
            "details": {
                "purpose": "Generates facts using the OpenAI API.",
                "content": "const openai = require('../config/openai');\n\n// Service method to generate a fact using OpenAI Chat API\nexports.generateFact = async ({ word, type, translations, definitions }) => {\n    try {\n        // Send a request to the OpenAI API with the specified prompt and parameters\n        const response = await openai.chat.completions.create({\n            model: 'gpt-4',\n            messages: [\n                {\n                    role: 'system',\n                    content: `You are a knowledgeable Mi'gmaq linguist. Share an insightful fact or story about the word \"${word}\", its origins, and its cultural significance. Keep it short between 1-2 sentences.`,\n                },\n                {\n                    role: 'user',\n                    content: `Word: ${word}\\nType: ${type}\\nTranslations: ${translations}\\nDefinitions: ${definitions}`,\n                },\n            ],\n            temperature: 1,\n            max_tokens: 100,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0,\n        });\n\n        // Extract and return the generated fact from the API response\n        return response.choices[0].message.content;\n    } catch (error) {\n        console.error('Error generating fact with OpenAI:', error.response ? error.response.data : error.message);\n        throw error;\n    }\n};",
                "notes": "Handles fact generation using the OpenAI Chat API."
            }
        },
        {
            "id": "34",
            "name": "commentsService.js",
            "path": "server/services/commentsService.js",
            "description": "Service for managing comments.",
            "details": {
                "purpose": "Fetches and adds comments from/to the database.",
                "content": "const supabase = require('../config/database');\n\n// Function to fetch comments for a given wordId\nexports.getComments = async (wordId) => {\n    try {\n        const { data, error } = await supabase\n            .from('comments')\n            .select('*')\n            .eq('word_id', wordId) // Filter comments by wordId\n            .order('created_at', { ascending: true }); // Order comments by creation time\n\n        if (error) throw error;\n        return data; // Return the fetched comments\n    } catch (error) {\n        console.error('Error fetching comments:', error);\n        throw error;\n    }\n};\n\n// Function to add a new comment\nexports.addComment = async (comment) => {\n    try {\n        // Set the created_at field to the current UTC time\n        comment.created_at = new Date().toISOString();\n\n        const { data, error } = await supabase\n            .from('comments')\n            .insert([comment]) // Insert the new comment into the database\n            .select(); // Select the inserted comment\n\n        if (error) throw error;\n        return data[0]; // Return the inserted comment\n    } catch (error) {\n        console.error('Error adding comment:', error);\n        throw error;\n    }\n};",
                "notes": "Handles fetching and adding comments to the database."
            }
        },
        {
            "id": "35",
            "name": "dictionaryService.js",
            "path": "server/services/dictionaryService.js",
            "description": "Service for managing dictionary data.",
            "details": {
                "purpose": "Fetches dictionary data from a JSON file.",
                "content": "const fs = require('fs').promises;\nconst path = require('path');\n\nconst dictionaryFilePath = path.join(__dirname, '..', '..', 'client', 'assets', 'dictionary.json');\n\n// Function to get the full dictionary\nexports.getDictionary = async () => {\n    try {\n        const data = await fs.readFile(dictionaryFilePath, 'utf8'); // Read the dictionary file\n        const parsedData = JSON.parse(data); // Parse the JSON data\n        return parsedData.message.words; // Return the words from the parsed data\n    } catch (error) {\n        console.error('Error reading dictionary file:', error);\n        throw new Error('Error reading dictionary file'); // Throw an error if reading fails\n    }\n};\n\n// Function to get details of a specific word\nexports.getWordDetails = async (word) => {\n    try {\n        const data = await fs.readFile(dictionaryFilePath, 'utf8'); // Read the dictionary file\n        const dictionary = JSON.parse(data).message.words; // Parse the JSON data\n        const wordDetails = dictionary.find(item => item.word === word); // Find the word details\n        if (!wordDetails) throw new Error('Word not found');\n        return wordDetails; // Return the word details\n    } catch (error) {\n        console.error('Error reading dictionary file:', error);\n        throw new Error('Error reading dictionary file'); // Throw an error if reading fails\n    }\n};",
                "notes": "Handles fetching and parsing dictionary data from a JSON file."
            }
        },
        {
            "id": "36",
            "name": "wordOfTheDayService.js",
            "path": "server/services/wordOfTheDayService.js",
            "description": "Service for managing the word of the day.",
            "details": {
                "purpose": "Fetches, updates, and manages the word of the day in Supabase.",
                "content": "const supabase = require('../config/database');\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// Path to the dictionary file\nconst dictionaryFilePath = path.join(__dirname, '..', '..', 'client', 'assets', 'dictionary.json');\n\n// Function to get the current word of the day from Supabase\nexports.getWordOfTheDay = async () => {\n    try {\n        const { data, error } = await supabase\n            .from('word_of_the_day')\n            .select('*')\n            .order('created_at', { ascending: false })\n            .limit(1)\n            .single();\n\n        // If no word of the day is found, select a random word from the dictionary\n        if (error && error.code === 'PGRST116') {\n            const randomWord = await exports.selectRandomWord();\n            await exports.addWordOfTheDay(randomWord);\n            return randomWord;\n        } else if (error) {\n            throw new Error('Failed to fetch word of the day');\n        }\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\n// Function to add a new word of the day to Supabase\nexports.addWordOfTheDay = async (wordData) => {\n    if (!wordData || typeof wordData !== 'object') {\n        throw new Error('Invalid word data');\n    }\n\n    try {\n        const { data, error } = await supabase\n            .from('word_of_the_day')\n            .insert([wordData]);\n\n        if (error) {\n            throw new Error('Failed to add word of the day');\n        }\n\n        return data;\n    } catch (err) {\n        throw err;\n    }\n};\n\n// Function to select a random word from the dictionary file\nexports.selectRandomWord = async () => {\n    try {\n        const data = await fs.readFile(dictionaryFilePath, 'utf8');\n        const dictionary = JSON.parse(data);\n\n        if (!Array.isArray(dictionary.message.words) || dictionary.message.words.length === 0) {\n            throw new Error('Dictionary is empty or not an array');\n        }\n\n        const randomIndex = Math.floor(Math.random() * dictionary.message.words.length);\n        const randomWord = dictionary.message.words[randomIndex];\n        return randomWord;\n    } catch (err) {\n        throw err;\n    }\n};\n\n// Function to update the word of the day in Supabase\nexports.updateWordOfTheDay = async () => {\n    try {\n        const randomWord = await exports.selectRandomWord();\n        await exports.deletePreviousWords();\n        await exports.addWordOfTheDay(randomWord);\n    } catch (err) {\n        throw err;\n    }\n};\n\n// Function to delete all previous words of the day from Supabase\nexports.deletePreviousWords = async () => {\n    try {\n        const { error } = await supabase\n            .from('word_of_the_day')\n            .delete()\n            .neq('id', -1); // Delete all rows\n\n        if (error) {\n            throw new Error('Failed to delete previous words');\n        }\n    } catch (err) {\n        throw err;\n    }\n};",
                "notes": "Handles fetching, adding, and updating the word of the day."
            }
        },
        {
            "id": "37",
            "name": "gamesService.js",
            "path": "server/services/games/gamesService.js",
            "description": "Service for managing game data.",
            "details": {
                "purpose": "Fetches random words for the flashcard game.",
                "content": "const fs = require('fs').promises;\nconst path = require('path');\n\n// Path to the dictionary file\nconst dictionaryFilePath = path.join(__dirname, '..', '..', '..', 'client', 'assets', 'dictionary.json');\n\n// Function to get random words from the dictionary\nasync function getRandomWords(count = 6) {\n    try {\n        const data = await fs.readFile(dictionaryFilePath, 'utf8');\n        const dictionary = JSON.parse(data);\n\n        if (!Array.isArray(dictionary.message.words) || dictionary.message.words.length === 0) {\n            throw new Error('Dictionary is empty or not an array');\n        }\n\n        // Shuffle the words and select the first 'count' words\n        const shuffledWords = dictionary.message.words.sort(() => 0.5 - Math.random());\n        const selectedWords = shuffledWords.slice(0, count);\n\n        // Duplicate the words to create pairs and shuffle again\n        const wordPairs = [...selectedWords, ...selectedWords].sort(() => 0.5 - Math.random());\n\n        // Return words with definitions\n        return wordPairs.map(wordObj => ({\n            word: wordObj.word,\n            definition: wordObj.definitions ? wordObj.definitions[0] : 'No definition available' // Select the first definition\n        }));\n    } catch (error) {\n        throw new Error('Error reading dictionary file');\n    }\n}\n\n// Function to get game data based on the game type\nexports.getGameData = async (gameType) => {\n    switch (gameType) {\n        case 'flashcard':\n            return await getRandomWords();\n        // Add cases for other game types here\n        default:\n            throw new Error('Invalid game type');\n    }\n};",
                "notes": "Handles fetching random words for the flashcard game."
            }
        },
        {
            "id": "38",
            "name": "lessonsRoutes.js",
            "path": "server/routes/lessons/lessonsRoutes.js",
            "description": "Express route for lesson-related operations.",
            "details": {
                "purpose": "Handles routing for lesson-related endpoints.",
                "content": "// lessonsRoutes.js content goes here.",
                "notes": "Currently empty. To be implemented."
            }
        },
        {
            "id": "39",
            "name": "resourcesRoutes.js",
            "path": "server/routes/resources/resourcesRoutes.js",
            "description": "Express route for resource-related operations.",
            "details": {
                "purpose": "Handles routing for resource-related endpoints.",
                "content": "// resourcesRoutes.js content goes here.",
                "notes": "Currently empty. To be implemented."
            }
        },
        {
            "id": "40",
            "name": "resourcesController.js",
            "path": "server/controllers/resources/resourcesController.js",
            "description": "Controller for handling resource-related requests.",
            "details": {
                "purpose": "Manages resource-related operations and business logic.",
                "content": "// resourcesController.js content goes here.",
                "notes": "Currently empty. To be implemented."
            }
        },
        {
            "id": "41",
            "name": "lessonsController.js",
            "path": "server/controllers/lessons/lessonsController.js",
            "description": "Controller for handling lesson-related requests.",
            "details": {
                "purpose": "Manages lesson-related operations and business logic.",
                "content": "// lessonsController.js content goes here.",
                "notes": "Currently empty. To be implemented."
            }
        },
        {
            "id": "42",
            "name": "aiRoutes.js",
            "path": "server/routes/aiRoutes.js",
            "description": "Express route for AI-related operations.",
            "details": {
                "purpose": "Handles routing for AI-related endpoints.",
                "content": "const express = require('express');\nconst router = express.Router();\nconst aiController = require('../controllers/aiController');\n\n// Define the route to fetch interesting facts\nrouter.get('/fact', aiController.getFact);\n\nmodule.exports = router;",
                "notes": "Includes routing for fetching AI-generated facts."
            }
        },
        {
            "id": "43",
            "name": "commentsRoutes.js",
            "path": "server/routes/commentsRoutes.js",
            "description": "Express route for comment-related operations.",
            "details": {
                "purpose": "Handles routing for comment-related endpoints.",
                "content": "const express = require('express'); // Import the express module\nconst router = express.Router(); // Create a new router object\nconst commentsController = require('../controllers/commentsController'); // Import the comments controller\n\n// Define a route to get comments\nrouter.get('/comments', commentsController.getComments);\n\n// Define a route to add a new comment\nrouter.post('/comments', commentsController.addComment);\n\nmodule.exports = router; // Export the router",
                "notes": "Includes routing for fetching and adding comments."
            }
        },
        {
            "id": "44",
            "name": "dictionaryRoutes.js",
            "path": "server/routes/dictionaryRoutes.js",
            "description": "Express route for dictionary-related operations.",
            "details": {
                "purpose": "Handles routing for dictionary-related endpoints.",
                "content": "const express = require('express'); // Import the express module\nconst router = express.Router(); // Create a new router object\nconst dictionaryController = require('../controllers/dictionaryController'); // Import the dictionary controller\n\n// Define a route to get the dictionary\nrouter.get('/dictionary', dictionaryController.getDictionary);\n\n// Define a route to get details of a specific word\nrouter.get('/word-details', dictionaryController.getWordDetails);\n\nmodule.exports = router; // Export the router",
                "notes": "Includes routing for fetching dictionary data and word details."
            }
        },
        {
            "id": "45",
            "name": "wordOfTheDayRoutes.js",
            "path": "server/routes/wordOfTheDayRoutes.js",
            "description": "Express route for word of the day operations.",
            "details": {
                "purpose": "Handles routing for word of the day endpoints.",
                "content": "const express = require('express');\nconst router = express.Router();\nconst wordOfTheDayController = require('../controllers/wordOfTheDayController');\n\n// Route to get the current word of the day\nrouter.get('/word-of-the-day', wordOfTheDayController.getWordOfTheDay);\n\n// Route to add a new word of the day\nrouter.post('/word-of-the-day', wordOfTheDayController.addWordOfTheDay);\n\n// Route to update the word of the day\nrouter.put('/word-of-the-day/update', wordOfTheDayController.updateWordOfTheDay);\n\nmodule.exports = router;",
                "notes": "Includes routing for fetching, adding, and updating the word of the day."
            }
        },
        {
            "id": "46",
            "name": "gamesRoutes.js",
            "path": "server/routes/games/gamesRoutes.js",
            "description": "Express route for game-related operations.",
            "details": {
                "purpose": "Handles routing for game-related endpoints.",
                "content": "// server/routes/games/gamesRoutes.js\nconst express = require('express');\nconst router = express.Router();\nconst gamesController = require('../../controllers/games/gamesController');\n\n// Route to get game data based on game type\nrouter.get('/:gameType', gamesController.getGameData);\n\nmodule.exports = router;",
                "notes": "Includes routing for fetching game data."
            }
        },
        {
            "id": "47",
            "name": "aiController.js",
            "path": "server/controllers/aiController.js",
            "description": "Controller for handling AI-related requests.",
            "details": {
                "purpose": "Manages AI-related operations and business logic.",
                "content": "const aiService = require('../services/aiService');\n\n// Controller method to handle the request for generating a fact\nexports.getFact = async (req, res) => {\n    try {\n        // Retrieve query parameters from the request\n        const { word, type, translations, definitions } = req.query;\n\n        // Call the service method to generate the fact\n        const fact = await aiService.generateFact({ word, type, translations, definitions });\n\n        // Send the generated fact in the response\n        res.json({ word, type, translations, definitions, fact });\n    } catch (error) {\n        console.error('Error generating fact:', error);\n        res.status(500).json({ error: 'Failed to generate fact' });\n    }\n};",
                "notes": "Includes logic for handling requests to generate AI facts."
            }
        },
        {
            "id": "48",
            "name": "commentsController.js",
            "path": "server/controllers/commentsController.js",
            "description": "Controller for handling comment-related requests.",
            "details": {
                "purpose": "Manages comment-related operations and business logic.",
                "content": "const commentsService = require('../services/commentsService'); // Import the comments service\n\n// Controller function to get comments\nexports.getComments = async (req, res) => {\n    const { word_id } = req.query; // Get the 'word_id' query parameter from the request\n    if (!word_id) {\n        return res.status(400).json({ error: 'word_id is required' }); // Respond with an error if 'word_id' is missing\n    }\n    try {\n        const comments = await commentsService.getComments(word_id); // Fetch comments from the service\n        res.json(comments); // Respond with the comments in JSON format\n    } catch (error) {\n        console.error('Error fetching comments:', error); // Log any errors\n        res.status(500).json({ error: 'Failed to fetch comments' }); // Respond with an error message\n    }\n};\n\n// Controller function to add a new comment\nexports.addComment = async (req, res) => {\n    const { word_id, parent_id, name, email, content } = req.body; // Get comment data from the request body\n    if (!word_id || !name || !email || !content) {\n        return res.status(400).json({ error: 'Missing required fields' }); // Respond with an error if any required fields are missing\n    }\n    try {\n        const newComment = await commentsService.addComment({ word_id, parent_id, name, email, content }); // Add the new comment using the service\n        res.json(newComment); // Respond with the new comment in JSON format\n    } catch (error) {\n        console.error('Error adding comment:', error); // Log any errors\n        res.status(500).json({ error: 'Failed to add comment' }); // Respond with an error message\n    }\n};",
                "notes": "Includes logic for handling requests to fetch and add comments."
            }
        },
        {
            "id": "49",
            "name": "dictionaryController.js",
            "path": "server/controllers/dictionaryController.js",
            "description": "Controller for handling dictionary-related requests.",
            "details": {
                "purpose": "Manages dictionary-related operations and business logic.",
                "content": "const dictionaryService = require('../services/dictionaryService'); // Import the dictionary service\n\n// Controller function to get the dictionary\nexports.getDictionary = async (req, res) => {\n    try {\n        const dictionary = await dictionaryService.getDictionary(); // Fetch the dictionary from the service\n        res.json(dictionary); // Respond with the dictionary in JSON format\n    } catch (error) {\n        console.error('Error fetching dictionary data:', error); // Log any errors\n        res.status(500).json({ error: 'Failed to fetch dictionary data' }); // Respond with an error message\n    }\n};\n\n// Controller function to get details of a specific word\nexports.getWordDetails = async (req, res) => {\n    const { word } = req.query; // Get the 'word' query parameter from the request\n    try {\n        const wordDetails = await dictionaryService.getWordDetails(word); // Fetch the word details from the service\n        res.json(wordDetails); // Respond with the word details in JSON format\n    } catch (error) {\n        console.error('Error fetching word details:', error); // Log any errors\n        res.status(500).json({ error: 'Failed to fetch word details' }); // Respond with an error message\n    }\n};",
                "notes": "Includes logic for handling requests to fetch dictionary data and word details."
            }
        },
        {
            "id": "50",
            "name": "wordOfTheDayController.js",
            "path": "server/controllers/wordOfTheDayController.js",
            "description": "Controller for handling word of the day requests.",
            "details": {
                "purpose": "Manages word of the day operations and business logic.",
                "content": "const wordOfTheDayService = require('../services/wordOfTheDayService');\n\n// Controller to get the current word of the day\nexports.getWordOfTheDay = async (req, res) => {\n    try {\n        const wordOfTheDay = await wordOfTheDayService.getWordOfTheDay();\n        res.json(wordOfTheDay);\n    } catch (error) {\n        res.status(500).json({ error: 'Failed to fetch word of the day' });\n    }\n};\n\n// Controller to add a new word of the day\nexports.addWordOfTheDay = async (req, res) => {\n    try {\n        const wordData = req.body;\n        const newWord = await wordOfTheDayService.addWordOfTheDay(wordData);\n        res.status(201).json(newWord);\n    } catch (error) {\n        res.status(500).json({ error: 'Failed to add word of the day' });\n    }\n};\n\n// Controller to update the word of the day\nexports.updateWordOfTheDay = async (req, res) => {\n    try {\n        await wordOfTheDayService.updateWordOfTheDay();\n        res.status(201).json({ message: 'Word of the Day updated successfully' });\n    } catch (error) {\n        res.status(500).json({ error: 'Failed to update word of the day' });\n    }\n};",
                "notes": "Includes logic for handling requests to fetch, add, and update the word of the day."
            }
        }

]
